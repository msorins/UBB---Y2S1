(DEFUN inOrder(lst)
  (COND
    ((= (list-length lst) 1) lst)
    ((= (list-length lst) 2) (APPEND (inOrder (CAR (CDR lst))) (CAR lst)) )
    ((= (list-length lst) 3) (APPEND (inOrder (CAR (CDR lst))) (LIST (CAR lst)) (inOrder (CAR (CDR (CDR lst))))  ) )
  )
)

(SETQ l (LIST `A (LIST `B) (LIST `C (LIST `D) (LIST `E))) )
(WRITE (inOrder l))


(defun test()
  (SETQ x '())
  (assert (equal (inOrder x) NIL))

  (SETQ l (LIST `A (LIST `B) (LIST `C (LIST `D) (LIST `E))) )
  (assert (equal (inOrder l) (LIST `B `A `D `C `E)))

  (SETQ y (LIST `A (LIST `B) (LIST `C)) )
  (assert (equal (inOrder y) (LIST `B `A `C)))

)

(test)
